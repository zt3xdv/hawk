var Class = require('../../utils/Class');var Contains = require('./Contains');var GetPoint = require('./GetPoint');var GetPoints = require('./GetPoints');var GEOM_CONST = require('../const');var Line = require('../line/Line');var Random = require('./Random');var Triangle = new Class({    initialize:    function Triangle (x1, y1, x2, y2, x3, y3)    {        if (x1 === undefined) { x1 = 0; }        if (y1 === undefined) { y1 = 0; }        if (x2 === undefined) { x2 = 0; }        if (y2 === undefined) { y2 = 0; }        if (x3 === undefined) { x3 = 0; }        if (y3 === undefined) { y3 = 0; }        this.type = GEOM_CONST.TRIANGLE;        this.x1 = x1;        this.y1 = y1;        this.x2 = x2;        this.y2 = y2;        this.x3 = x3;        this.y3 = y3;    },    contains: function (x, y)    {        return Contains(this, x, y);    },    getPoint: function (position, output)    {        return GetPoint(this, position, output);    },    getPoints: function (quantity, stepRate, output)    {        return GetPoints(this, quantity, stepRate, output);    },    getRandomPoint: function (point)    {        return Random(this, point);    },    setTo: function (x1, y1, x2, y2, x3, y3)    {        if (x1 === undefined) { x1 = 0; }        if (y1 === undefined) { y1 = 0; }        if (x2 === undefined) { x2 = 0; }        if (y2 === undefined) { y2 = 0; }        if (x3 === undefined) { x3 = 0; }        if (y3 === undefined) { y3 = 0; }        this.x1 = x1;        this.y1 = y1;        this.x2 = x2;        this.y2 = y2;        this.x3 = x3;        this.y3 = y3;        return this;    },    getLineA: function (line)    {        if (line === undefined) { line = new Line(); }        line.setTo(this.x1, this.y1, this.x2, this.y2);        return line;    },    getLineB: function (line)    {        if (line === undefined) { line = new Line(); }        line.setTo(this.x2, this.y2, this.x3, this.y3);        return line;    },    getLineC: function (line)    {        if (line === undefined) { line = new Line(); }        line.setTo(this.x3, this.y3, this.x1, this.y1);        return line;    },    left: {        get: function ()        {            return Math.min(this.x1, this.x2, this.x3);        },        set: function (value)        {            var diff = 0;            if (this.x1 <= this.x2 && this.x1 <= this.x3)            {                diff = this.x1 - value;            }            else if (this.x2 <= this.x1 && this.x2 <= this.x3)            {                diff = this.x2 - value;            }            else            {                diff = this.x3 - value;            }            this.x1 -= diff;            this.x2 -= diff;            this.x3 -= diff;        }    },    right: {        get: function ()        {            return Math.max(this.x1, this.x2, this.x3);        },        set: function (value)        {            var diff = 0;            if (this.x1 >= this.x2 && this.x1 >= this.x3)            {                diff = this.x1 - value;            }            else if (this.x2 >= this.x1 && this.x2 >= this.x3)            {                diff = this.x2 - value;            }            else            {                diff = this.x3 - value;            }            this.x1 -= diff;            this.x2 -= diff;            this.x3 -= diff;        }    },    top: {        get: function ()        {            return Math.min(this.y1, this.y2, this.y3);        },        set: function (value)        {            var diff = 0;            if (this.y1 <= this.y2 && this.y1 <= this.y3)            {                diff = this.y1 - value;            }            else if (this.y2 <= this.y1 && this.y2 <= this.y3)            {                diff = this.y2 - value;            }            else            {                diff = this.y3 - value;            }            this.y1 -= diff;            this.y2 -= diff;            this.y3 -= diff;        }    },    bottom: {        get: function ()        {            return Math.max(this.y1, this.y2, this.y3);        },        set: function (value)        {            var diff = 0;            if (this.y1 >= this.y2 && this.y1 >= this.y3)            {                diff = this.y1 - value;            }            else if (this.y2 >= this.y1 && this.y2 >= this.y3)            {                diff = this.y2 - value;            }            else            {                diff = this.y3 - value;            }            this.y1 -= diff;            this.y2 -= diff;            this.y3 -= diff;        }    }});module.exports = Triangle;