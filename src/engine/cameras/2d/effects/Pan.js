var Clamp = require('../../../math/Clamp');var Class = require('../../../utils/Class');var EaseMap = require('../../../math/easing/EaseMap');var Events = require('../events');var Vector2 = require('../../../math/Vector2');var Pan = new Class({    initialize:    function Pan (camera)    {        this.camera = camera;        this.isRunning = false;        this.duration = 0;        this.source = new Vector2();        this.current = new Vector2();        this.destination = new Vector2();        this.ease;        this.progress = 0;        this._elapsed = 0;        this._onUpdate;        this._onUpdateScope;    },    start: function (x, y, duration, ease, force, callback, context)    {        if (duration === undefined) { duration = 1000; }        if (ease === undefined) { ease = EaseMap.Linear; }        if (force === undefined) { force = false; }        if (callback === undefined) { callback = null; }        if (context === undefined) { context = this.camera.scene; }        var cam = this.camera;        if (!force && this.isRunning)        {            return cam;        }        this.isRunning = true;        this.duration = duration;        this.progress = 0;        this.source.set(cam.scrollX, cam.scrollY);        this.destination.set(x, y);        cam.getScroll(x, y, this.current);        if (typeof ease === 'string' && EaseMap.hasOwnProperty(ease))        {            this.ease = EaseMap[ease];        }        else if (typeof ease === 'function')        {            this.ease = ease;        }        this._elapsed = 0;        this._onUpdate = callback;        this._onUpdateScope = context;        this.camera.emit(Events.PAN_START, this.camera, this, duration, x, y);        return cam;    },    update: function (time, delta)    {        if (!this.isRunning)        {            return;        }        this._elapsed += delta;        var progress = Clamp(this._elapsed / this.duration, 0, 1);        this.progress = progress;        var cam = this.camera;        if (this._elapsed < this.duration)        {            var v = this.ease(progress);            cam.getScroll(this.destination.x, this.destination.y, this.current);            var x = this.source.x + ((this.current.x - this.source.x) * v);            var y = this.source.y + ((this.current.y - this.source.y) * v);            cam.setScroll(x, y);            if (this._onUpdate)            {                this._onUpdate.call(this._onUpdateScope, cam, progress, x, y);            }        }        else        {            cam.centerOn(this.destination.x, this.destination.y);            if (this._onUpdate)            {                this._onUpdate.call(this._onUpdateScope, cam, progress, cam.scrollX, cam.scrollY);            }            this.effectComplete();        }    },    effectComplete: function ()    {        this._onUpdate = null;        this._onUpdateScope = null;        this.isRunning = false;        this.camera.emit(Events.PAN_COMPLETE, this.camera, this);    },    reset: function ()    {        this.isRunning = false;        this._onUpdate = null;        this._onUpdateScope = null;    },    destroy: function ()    {        this.reset();        this.camera = null;        this.source = null;        this.destination = null;    }});module.exports = Pan;