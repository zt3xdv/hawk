var Class = require('../../utils/Class');var CONST = require('../const');var File = require('../File');var FileTypesManager = require('../FileTypesManager');var GetFastValue = require('../../utils/object/GetFastValue');var IsPlainObject = require('../../utils/object/IsPlainObject');var TextFile = new Class({    Extends: File,    initialize:    function TextFile (loader, key, url, xhrSettings)    {        var type = 'text';        var extension = 'txt';        var cache = loader.cacheManager.text;        if (IsPlainObject(key))        {            var config = key;            key = GetFastValue(config, 'key');            url = GetFastValue(config, 'url');            xhrSettings = GetFastValue(config, 'xhrSettings');            extension = GetFastValue(config, 'extension', extension);            type = GetFastValue(config, 'type', type);            cache = GetFastValue(config, 'cache', cache);        }        var fileConfig = {            type: type,            cache: cache,            extension: extension,            responseType: 'text',            key: key,            url: url,            xhrSettings: xhrSettings        };        File.call(this, loader, fileConfig);    },        onProcess: function ()    {        this.state = CONST.FILE_PROCESSING;        this.data = this.xhrLoader.responseText;        this.onProcessComplete();    }});FileTypesManager.register('text', function (key, url, xhrSettings){    if (Array.isArray(key))    {        for (var i = 0; i < key.length; i++)        {            //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object            this.addFile(new TextFile(this, key[i]));        }    }    else    {        this.addFile(new TextFile(this, key, url, xhrSettings));    }    return this;});module.exports = TextFile;