var Class = require('../../utils/Class');var CONST = require('../const');var File = require('../File');var FileTypesManager = require('../FileTypesManager');var GetFastValue = require('../../utils/object/GetFastValue');var IsPlainObject = require('../../utils/object/IsPlainObject');var Shader = require('../../display/shader/BaseShader');var GLSLFile = new Class({    Extends: File,    initialize:    function GLSLFile (loader, key, url, shaderType, xhrSettings)    {        var extension = 'glsl';        if (IsPlainObject(key))        {            var config = key;            key = GetFastValue(config, 'key');            url = GetFastValue(config, 'url');            shaderType = GetFastValue(config, 'shaderType', 'fragment');            xhrSettings = GetFastValue(config, 'xhrSettings');            extension = GetFastValue(config, 'extension', extension);        }        else if (shaderType === undefined)        {            shaderType = 'fragment';        }        var fileConfig = {            type: 'glsl',            cache: loader.cacheManager.shader,            extension: extension,            responseType: 'text',            key: key,            url: url,            config: {                shaderType: shaderType            },            xhrSettings: xhrSettings        };        File.call(this, loader, fileConfig);    },        onProcess: function ()    {        this.state = CONST.FILE_PROCESSING;        this.data = this.xhrLoader.responseText;        this.onProcessComplete();    },        addToCache: function ()    {        var data = this.data.split('\n');        //  Check to see if this is a shader bundle, or raw glsl file.        var block = this.extractBlock(data, 0);        if (block)        {            while (block)            {                var key = this.getShaderName(block.header);                var shaderType = this.getShaderType(block.header);                var uniforms = this.getShaderUniforms(block.header);                var shaderSrc = block.shader;                if (this.cache.has(key))                {                    var shader = this.cache.get(key);                    if (shaderType === 'fragment')                    {                        shader.fragmentSrc = shaderSrc;                    }                    else                    {                        shader.vertexSrc = shaderSrc;                    }                    if (!shader.uniforms)                    {                        shader.uniforms = uniforms;                    }                }                else if (shaderType === 'fragment')                {                    this.cache.add(key, new Shader(key, shaderSrc, '', uniforms));                }                else                {                    this.cache.add(key, new Shader(key, '', shaderSrc, uniforms));                }                block = this.extractBlock(data, block.offset);            }        }        else if (this.config.shaderType === 'fragment')        {            //  Single shader            this.cache.add(this.key, new Shader(this.key, this.data));        }        else        {            this.cache.add(this.key, new Shader(this.key, '', this.data));        }    },        getShaderName: function (headerSource)    {        for (var i = 0; i < headerSource.length; i++)        {            var line = headerSource[i].trim();            if (line.substring(0, 5) === 'name:')            {                return line.substring(5).trim();            }        }        return this.key;    },        getShaderType: function (headerSource)    {        for (var i = 0; i < headerSource.length; i++)        {            var line = headerSource[i].trim();            if (line.substring(0, 5) === 'type:')            {                return line.substring(5).trim();            }        }        return this.config.shaderType;    },        getShaderUniforms: function (headerSource)    {        var uniforms = {};        for (var i = 0; i < headerSource.length; i++)        {            var line = headerSource[i].trim();            if (line.substring(0, 8) === 'uniform.')            {                var pos = line.indexOf(':');                if (pos)                {                    var key = line.substring(8, pos);                    try                    {                        uniforms[key] = JSON.parse(line.substring(pos + 1));                    }                    catch (e)                    {                        console.warn('Invalid uniform JSON: ' + key);                    }                }            }        }        return uniforms;    },        extractBlock: function (data, offset)    {        var headerStart = -1;        var headerEnd = -1;        var blockEnd = -1;        var headerOpen = false;        var captureSource = false;        var headerSource = [];        var shaderSource = [];        for (var i = offset; i < data.length; i++)        {            var line = data[i].trim();            if (line === '---')            {                if (headerStart === -1)                {                    headerStart = i;                    headerOpen = true;                }                else if (headerOpen)                {                    headerEnd = i;                    headerOpen = false;                    captureSource = true;                }                else                {                    //  We've hit another --- delimiter, break out                    captureSource = false;                    break;                }            }            else if (headerOpen)            {                headerSource.push(line);            }            else if (captureSource)            {                shaderSource.push(line);                blockEnd = i;            }        }        if (!headerOpen && headerEnd !== -1)        {            return { header: headerSource, shader: shaderSource.join('\n'), offset: blockEnd };        }        else        {            return null;        }    }});FileTypesManager.register('glsl', function (key, url, shaderType, xhrSettings){    if (Array.isArray(key))    {        for (var i = 0; i < key.length; i++)        {            //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object            this.addFile(new GLSLFile(this, key[i]));        }    }    else    {        this.addFile(new GLSLFile(this, key, url, shaderType, xhrSettings));    }    return this;});module.exports = GLSLFile;