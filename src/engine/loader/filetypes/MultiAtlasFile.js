var Class = require('../../utils/Class');var FileTypesManager = require('../FileTypesManager');var GetFastValue = require('../../utils/object/GetFastValue');var ImageFile = require('./ImageFile');var IsPlainObject = require('../../utils/object/IsPlainObject');var JSONFile = require('./JSONFile');var MultiFile = require('../MultiFile');var MultiAtlasFile = new Class({    Extends: MultiFile,    initialize:    function MultiAtlasFile (loader, key, atlasURL, path, baseURL, atlasXhrSettings, textureXhrSettings)    {        if (IsPlainObject(key))        {            var config = key;            key = GetFastValue(config, 'key');            if (GetFastValue(config, 'url', false))            {                atlasURL = GetFastValue(config, 'url');            }            else            {                atlasURL = GetFastValue(config, 'atlasURL');            }            atlasXhrSettings = GetFastValue(config, 'xhrSettings');            path = GetFastValue(config, 'path');            baseURL = GetFastValue(config, 'baseURL');            textureXhrSettings = GetFastValue(config, 'textureXhrSettings');        }        var data = new JSONFile(loader, key, atlasURL, atlasXhrSettings);        MultiFile.call(this, loader, 'multiatlas', key, [ data ]);        this.config.path = path;        this.config.baseURL = baseURL;        this.config.textureXhrSettings = textureXhrSettings;    },        onFileComplete: function (file)    {        var index = this.files.indexOf(file);        if (index !== -1)        {            this.pending--;            if (file.type === 'json' && file.data.hasOwnProperty('textures'))            {                //  Inspect the data for the files to now load                var textures = file.data.textures;                var config = this.config;                var loader = this.loader;                var currentBaseURL = loader.baseURL;                var currentPath = loader.path;                var currentPrefix = loader.prefix;                var baseURL = GetFastValue(config, 'baseURL', this.baseURL);                var path = GetFastValue(config, 'path', this.path);                var prefix = GetFastValue(config, 'prefix', this.prefix);                var textureXhrSettings = GetFastValue(config, 'textureXhrSettings');                loader.setBaseURL(baseURL);                loader.setPath(path);                loader.setPrefix(prefix);                for (var i = 0; i < textures.length; i++)                {                    //  "image": "texture-packer-multi-atlas-0.png",                    var textureURL = textures[i].image;                    var key = 'MA' + this.multiKeyIndex + '_' + textureURL;                    var image = new ImageFile(loader, key, textureURL, textureXhrSettings);                    this.addToMultiFile(image);                    loader.addFile(image);                    //  "normalMap": "texture-packer-multi-atlas-0_n.png",                    if (textures[i].normalMap)                    {                        var normalMap = new ImageFile(loader, key, textures[i].normalMap, textureXhrSettings);                        normalMap.type = 'normalMap';                        image.setLink(normalMap);                        this.addToMultiFile(normalMap);                        loader.addFile(normalMap);                    }                }                //  Reset the loader settings                loader.setBaseURL(currentBaseURL);                loader.setPath(currentPath);                loader.setPrefix(currentPrefix);            }        }    },        addToCache: function ()    {        if (this.isReadyToProcess())        {            var fileJSON = this.files[0];            var data = [];            var images = [];            var normalMaps = [];            for (var i = 1; i < this.files.length; i++)            {                var file = this.files[i];                if (file.type === 'normalMap')                {                    continue;                }                var pos = file.key.indexOf('_');                var key = file.key.substr(pos + 1);                var image = file.data;                //  Now we need to find out which json entry this mapped to                for (var t = 0; t < fileJSON.data.textures.length; t++)                {                    var item = fileJSON.data.textures[t];                    if (item.image === key)                    {                        images.push(image);                        data.push(item);                        if (file.linkFile)                        {                            normalMaps.push(file.linkFile.data);                        }                        break;                    }                }            }            if (normalMaps.length === 0)            {                normalMaps = undefined;            }            this.loader.textureManager.addAtlasJSONArray(this.key, images, data, normalMaps);            this.complete = true;        }    }});FileTypesManager.register('multiatlas', function (key, atlasURL, path, baseURL, atlasXhrSettings){    var multifile;    //  Supports an Object file definition in the key argument    //  Or an array of objects in the key argument    //  Or a single entry where all arguments have been defined    if (Array.isArray(key))    {        for (var i = 0; i < key.length; i++)        {            multifile = new MultiAtlasFile(this, key[i]);            this.addFile(multifile.files);        }    }    else    {        multifile = new MultiAtlasFile(this, key, atlasURL, path, baseURL, atlasXhrSettings);        this.addFile(multifile.files);    }    return this;});module.exports = MultiAtlasFile;