function GetSize (width, height, x, y, dx, dy, mult){    if (mult === undefined) { mult = 16; }    return Math.floor((width + x) / dx) * Math.floor((height + y) / dy) * mult;}function PVRTC2bppSize (width, height){    width = Math.max(width, 16);    height = Math.max(height, 8);    return width * height / 4;}function PVRTC4bppSize (width, height){    width = Math.max(width, 8);    height = Math.max(height, 8);    return width * height / 2;}function BPTCSize (width, height){    return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;}function DXTEtcSmallSize (width, height){    return GetSize(width, height, 3, 3, 4, 4, 8);}function DXTEtcAstcBigSize (width, height){    return GetSize(width, height, 3, 3, 4, 4);}function ATC5x4Size (width, height){    return GetSize(width, height, 4, 3, 5, 4);}function ATC5x5Size (width, height){    return GetSize(width, height, 4, 4, 5, 5);}function ATC6x5Size (width, height){    return GetSize(width, height, 5, 4, 6, 5);}function ATC6x6Size (width, height){    return GetSize(width, height, 5, 5, 6, 6);}function ATC8x5Size (width, height){    return GetSize(width, height, 7, 4, 8, 5);}function ATC8x6Size (width, height){    return GetSize(width, height, 7, 5, 8, 6);}function ATC8x8Size (width, height){    return GetSize(width, height, 7, 7, 8, 8);}function ATC10x5Size (width, height){    return GetSize(width, height, 9, 4, 10, 5);}function ATC10x6Size (width, height){    return GetSize(width, height, 9, 5, 10, 6);}function ATC10x8Size (width, height){    return GetSize(width, height, 9, 7, 10, 8);}function ATC10x10Size (width, height){    return GetSize(width, height, 9, 9, 10, 10);}function ATC12x10Size (width, height){    return GetSize(width, height, 11, 9, 12, 10);}function ATC12x12Size (width, height){    return GetSize(width, height, 11, 11, 12, 12);}var FORMATS = {    0: { sizeFunc: PVRTC2bppSize, glFormat: [ 0x8C01 ] },    1: { sizeFunc: PVRTC2bppSize, glFormat: [ 0x8C03 ] },    2: { sizeFunc: PVRTC4bppSize, glFormat: [ 0x8C00 ] },    3: { sizeFunc: PVRTC4bppSize, glFormat: [ 0x8C02 ] },    6: { sizeFunc: DXTEtcSmallSize , glFormat: [ 0x8D64 ] },    7: { sizeFunc: DXTEtcSmallSize, glFormat: [ 0x83F0, 0x8C4C ] },    8: { sizeFunc: DXTEtcAstcBigSize, glFormat: [ 0x83F1, 0x8C4D ] },    9: { sizeFunc: DXTEtcAstcBigSize, glFormat: [ 0x83F2, 0x8C4E ] },    11: { sizeFunc: DXTEtcAstcBigSize, glFormat: [ 0x83F3, 0x8C4F ] },    14: { sizeFunc: BPTCSize, glFormat: [ 0x8E8E, 0x8E8F ] },    15: { sizeFunc: BPTCSize, glFormat: [ 0x8E8C, 0x8E8D ] },    22: { sizeFunc: DXTEtcSmallSize , glFormat: [ 0x9274, 0x9275 ] },    23: { sizeFunc: DXTEtcAstcBigSize, glFormat: [ 0x9278, 0x9279 ] },    24: { sizeFunc: DXTEtcSmallSize, glFormat: [ 0x9276, 0x9277 ] },    25: { sizeFunc: DXTEtcSmallSize, glFormat: [ 0x9270 ] },    26: { sizeFunc: DXTEtcAstcBigSize, glFormat: [ 0x9272 ] },    27: { sizeFunc: DXTEtcAstcBigSize, glFormat: [ 0x93B0, 0x93D0 ] },    28: { sizeFunc: ATC5x4Size, glFormat: [ 0x93B1, 0x93D1 ] },    29: { sizeFunc: ATC5x5Size, glFormat: [ 0x93B2, 0x93D2 ] },    30: { sizeFunc: ATC6x5Size, glFormat: [ 0x93B3, 0x93D3 ] },    31: { sizeFunc: ATC6x6Size, glFormat: [ 0x93B4, 0x93D4 ] },    32: { sizeFunc: ATC8x5Size, glFormat: [ 0x93B5, 0x93D5 ] },    33: { sizeFunc: ATC8x6Size, glFormat: [ 0x93B6, 0x93D6 ] },    34: { sizeFunc: ATC8x8Size, glFormat: [ 0x93B7, 0x93D7 ] },    35: { sizeFunc: ATC10x5Size, glFormat: [ 0x93B8, 0x93D8 ] },    36: { sizeFunc: ATC10x6Size, glFormat: [ 0x93B9, 0x93D9 ] },    37: { sizeFunc: ATC10x8Size, glFormat: [ 0x93BA, 0x93DA ] },    38: { sizeFunc: ATC10x10Size, glFormat: [ 0x93BB, 0x93DB ] },    39: { sizeFunc: ATC12x10Size, glFormat: [ 0x93BC, 0x93DC ] },    40: { sizeFunc: ATC12x12Size, glFormat: [ 0x93BD, 0x93DD ] }};var PVRParser = function (data){    var header = new Uint32Array(data, 0, 13);    var version = header[0];    var versionMatch = version === 0x03525650;    var pvrFormat = versionMatch ? header[2] : header[3];    var colorSpace = header[4];    var internalFormat = FORMATS[pvrFormat].glFormat[colorSpace];    var sizeFunction = FORMATS[pvrFormat].sizeFunc;    var mipmapLevels = header[11];    var width = header[7];    var height = header[6];    var dataOffset = 52 + header[12];    var image = new Uint8Array(data, dataOffset);    var mipmaps = new Array(mipmapLevels);    var offset = 0;    var levelWidth = width;    var levelHeight = height;    for (var i = 0; i < mipmapLevels; i++)    {        var levelSize = sizeFunction(levelWidth, levelHeight);        mipmaps[i] = {            data: new Uint8Array(image.buffer, image.byteOffset + offset, levelSize),            width: levelWidth,            height: levelHeight        };        levelWidth = Math.max(1, levelWidth >> 1);        levelHeight = Math.max(1, levelHeight >> 1);        offset += levelSize;    }    return {        mipmaps: mipmaps,        width: width,        height: height,        internalFormat: internalFormat,        compressed: true,        generateMipmap: false    };};module.exports = PVRParser;